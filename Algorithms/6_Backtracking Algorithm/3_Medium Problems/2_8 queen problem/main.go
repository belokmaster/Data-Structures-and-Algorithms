package main

import (
	"fmt"
)

/*
Задача о восьми ферзях - это задача разместить восемь ферзей на шахматной доске размером 8 × 8 таким образом,
чтобы ни один из них не атаковал друг друга (ни один ферзь не находится в одном ряду, столбце или диагонали).
*/

/*
Алгоритм начинает с размещения ферзя в первом столбце, затем переходит к следующему столбцу и размещает ферзя в первом
безопасном ряду этого столбца. Если алгоритм достигает 8-го столбца и все ферзи находятся в безопасном положении,
он выводит таблицу и возвращает значение true. Если алгоритм не может поместить ферзя в безопасное место в определенном столбце,
он возвращается к предыдущему столбцу и пробует другую строку.

Функция “isSafe” проверяет, безопасно ли размещать ферзя в определенной строке или столбце, проверяя, есть ли ферзи в том же ряду,
по диагонали или против диагонали.
*/

// Временная сложность: O(n * n!)
// Пространственная сложность: O(n^2)

const N = 8

// Проверка, безопасно ли ставить ферзя на позицию (row, col)
func isSafe(board [][]int, row, col int) bool {
	// Проверка по горизонтали
	for x := 0; x < col; x++ {
		if board[row][x] == 1 {
			return false
		}
	}
	// Проверка по диагонали верхняя левая
	for x, y := row, col; x >= 0 && y >= 0; x, y = x-1, y-1 {
		if board[x][y] == 1 {
			return false
		}
	}
	// Проверка по диагонали нижняя левая
	for x, y := row, col; x < N && y >= 0; x, y = x+1, y-1 {
		if board[x][y] == 1 {
			return false
		}
	}
	return true
}

// Рекурсивное решение задачи о ферзях
func solveNQueens(board [][]int, col int) bool {
	if col == N {
		// Вывод доски с решением
		for i := 0; i < N; i++ {
			for j := 0; j < N; j++ {
				fmt.Print(board[i][j], " ")
			}
			fmt.Println()
		}
		fmt.Println()
		return true
	}
	for i := 0; i < N; i++ {
		if isSafe(board, i, col) {
			board[i][col] = 1
			if solveNQueens(board, col+1) {
				return true
			}
			board[i][col] = 0
		}
	}
	return false
}

func main() {
	board := make([][]int, N)
	for i := range board {
		board[i] = make([]int, N)
	}
	if !solveNQueens(board, 0) {
		fmt.Println("Нет решения")
	}
}
