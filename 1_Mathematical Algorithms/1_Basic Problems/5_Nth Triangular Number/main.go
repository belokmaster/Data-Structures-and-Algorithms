package main

import "math"

// Число называется треугольным, если мы можем представить его в виде треугольной сетки
// точек таким образом, что точки образуют равносторонний треугольник,
// а каждая строка содержит столько же точек, сколько и номер строки,
// т. е. первая строка имеет одну точку, вторая строка — две точки,
// третья строка — три точки и т. д.
// Начальные треугольные числа — 1, 3 (1+2), 6 (1+2+3), 10 (1+2+3+4).

/*
Идея основана на том факте, что n-е треугольное число может быть записано как сумма n натуральных чисел,
то есть n* (n+1)/2. Причина этого проста: базовая линия треугольной сетки содержит n точек,
линия над основанием содержит (n-1) точек и так далее.
*/

// O(n)
func isTriangularLoop(num int) bool {
	if num < 0 {
		return false
	}

	sum := 0
	for i := 1; sum <= num; i++ {
		sum += i
		if sum == num {
			return true
		}
	}
	return false
}

// O(1)
// раскрываем формулу и получаем, (n*(n+1))/2 = num <=> n^2 + n + (-2 * num) = 0
func isTriangularEffective(num int) bool {
	if num < 0 {
		return false
	}

	a, b := 1, 1
	c := -2 * num
	d := b*b - 4*a*c // Дискриминант

	if d < 0 {
		return false
	}

	// Вычисляем корни
	root1 := (-float64(b) + math.Sqrt(float64(d))) / (2 * float64(a))
	root2 := (-float64(b) - math.Sqrt(float64(d))) / (2 * float64(a))

	// Проверяем, является ли хотя бы один корень натуральным числом
	return root1 > 0 && math.Floor(root1) == root1 || root2 > 0 && math.Floor(root2) == root2
}
